{
  "address": "0x26FD6E2Cf00BDf8d6d8433BAe578949711498fB3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "OnlyOwnerOrCoordinator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffeState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "CoordinatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract IVRFCoordinatorV2Plus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "setCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6466e7d839975ea84960288f83a9bdbdec580b7a34f6e915ad652575b9b0ad98",
  "receipt": {
    "to": null,
    "from": "0x61C2b68Ff0e5872ACDa86Ce920F27ECb4E18D8dA",
    "contractAddress": "0x26FD6E2Cf00BDf8d6d8433BAe578949711498fB3",
    "transactionIndex": 47,
    "gasUsed": "971701",
    "logsBloom": "0x
    "blockHash": "0x8b8553b5fe3c52ae062eed4a79e714286dcb4d9c36d7e7a78c9af0be6aa09fe0",
    "transactionHash": "0x6466e7d839975ea84960288f83a9bdbdec580b7a34f6e915ad652575b9b0ad98",
    "logs": [],
    "blockNumber": 6353951,
    "cumulativeGasUsed": "11271231",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000",
    "0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B",
    "64632589518529213581933405568772200777274765879021659614700779271005812976331",
    "0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae",
    200000,
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "2f06079a2218dbd2ee79aaaab907dfdf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffeState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"jipingl\",\"details\":\"chainlink VRF version is v2.5chainlink automation version is v2.1\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A truly decentralized Raffle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"checkUpkeep(bytes)\":{\"notice\":\"Automation will call this method to check if performUpkeep is executed\"},\"enter()\":{\"notice\":\"Users participate in the raffle through this function\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"performUpkeep(bytes)\":{\"notice\":\"Automation calls this method to trigger the selection of winners\"},\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"The raffle logic of this contract is as follows:1. Users join the raffle and pay a fee.2. After a certain time interval, chainlink automation will automatically trigger the logic of selecting the final winner.3. The final winner is calculated from the random number of chainlink VRF\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport {VRFConsumerBaseV2Plus} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\\\";\\nimport {VRFV2PlusClient} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffeState);\\n\\n/**\\n * @title A truly decentralized Raffle\\n * @author jipingl\\n *\\n * @notice The raffle logic of this contract is as follows:\\n * @notice 1. Users join the raffle and pay a fee.\\n * @notice 2. After a certain time interval, chainlink automation will automatically trigger the logic of selecting the final winner.\\n * @notice 3. The final winner is calculated from the random number of chainlink VRF\\n *\\n * @dev chainlink VRF version is v2.5\\n * @dev chainlink automation version is v2.1\\n */\\ncontract Raffle is VRFConsumerBaseV2Plus, AutomationCompatibleInterface {\\n  // Enums\\n  enum RaffleState {\\n    OPEN,\\n    CALCULATING\\n  }\\n\\n  // The current raffle state\\n  RaffleState private s_raffleSate;\\n\\n  // The raffle start timestamp\\n  uint256 private s_lastTimestamp;\\n\\n  // The recent winner's address\\n  address private s_recentWinner;\\n\\n  // All players\\n  address payable[] private s_players;\\n\\n  // The raffle time interval\\n  uint256 private immutable i_interval;\\n\\n  // The minimum admission fee cannot be lower than\\n  uint256 private immutable i_entranceFee;\\n\\n  // The VRF subscription id\\n  uint256 private immutable i_subscriptionId;\\n\\n  // The gas lane to use, which specifies the maximum gas price to bump to.\\n  bytes32 private immutable i_keyHash;\\n\\n  // Depends on the number of requested values that you want sent to the\\n  // fulfillRandomWords() function. Storing each word costs about 20,000 gas\\n  uint32 private i_callbackGasLimit;\\n\\n  // The number of block confirmations to wait for before VRF callback random number\\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n  // The number of random numbers that a single request will return\\n  uint32 private constant NUM_WORDS = 1;\\n\\n  // Set to `true` to enable payment in native tokens, or `false` to pay in LINK\\n  bool private constant ENABLE_NATIVE_PAYMENT = false;\\n\\n  /* Events */\\n  event RaffleEnter(address indexed player);\\n  event RequestedRaffleWinner(uint256 indexed requestId);\\n  event WinnerPicked(address indexed winner);\\n\\n  constructor(\\n    uint256 entranceFee,\\n    address vrfCoordinator,\\n    uint256 subscriptionId,\\n    bytes32 keyHash,\\n    uint32 callbackGasLimit,\\n    uint256 interval\\n  ) VRFConsumerBaseV2Plus(vrfCoordinator) {\\n    s_raffleSate = RaffleState.OPEN;\\n    s_lastTimestamp = block.timestamp;\\n    i_entranceFee = entranceFee;\\n    i_subscriptionId = subscriptionId;\\n    i_keyHash = keyHash;\\n    i_callbackGasLimit = callbackGasLimit;\\n    i_interval = interval;\\n  }\\n\\n  /**\\n   * @notice Users participate in the raffle through this function\\n   */\\n  function enter() public payable {\\n    if (msg.value < i_entranceFee) {\\n      revert Raffle__NotEnoughETHEntered();\\n    }\\n    if (s_raffleSate != RaffleState.OPEN) {\\n      revert Raffle__NotOpen();\\n    }\\n    s_players.push(payable(msg.sender));\\n    emit RaffleEnter(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Check if performUpkeep is executed\\n   */\\n  function checkUpkeepInternal() internal view returns (bool upkeepNeeded) {\\n    bool isOpen = RaffleState.OPEN == s_raffleSate;\\n    bool timePassed = (block.timestamp - s_lastTimestamp) > i_interval;\\n    bool hasPlayers = s_players.length > 0;\\n    bool hasBalance = address(this).balance > 0;\\n    upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n  }\\n\\n  /**\\n   * @notice Automation will call this method to check if performUpkeep is executed\\n   */\\n  function checkUpkeep(\\n    bytes calldata /* checkData */\\n  ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n    upkeepNeeded = checkUpkeepInternal();\\n    performData = new bytes(0);\\n  }\\n\\n  /**\\n   * @notice Automation calls this method to trigger the selection of winners\\n   */\\n  function performUpkeep(bytes calldata /* performData */) external override {\\n    bool upkeepNeeded = checkUpkeepInternal();\\n    if (!upkeepNeeded) {\\n      revert Raffle__UpkeepNotNeeded(\\n        address(this).balance,\\n        s_players.length,\\n        uint256(s_raffleSate)\\n      );\\n    }\\n    s_raffleSate = RaffleState.CALCULATING;\\n    // Request the random number from VRF\\n    uint256 requestId = s_vrfCoordinator.requestRandomWords(\\n      VRFV2PlusClient.RandomWordsRequest({\\n        keyHash: i_keyHash,\\n        subId: i_subscriptionId,\\n        requestConfirmations: REQUEST_CONFIRMATIONS,\\n        callbackGasLimit: i_callbackGasLimit,\\n        numWords: NUM_WORDS,\\n        extraArgs: VRFV2PlusClient._argsToBytes(\\n          VRFV2PlusClient.ExtraArgsV1({nativePayment: ENABLE_NATIVE_PAYMENT})\\n        )\\n      })\\n    );\\n    emit RequestedRaffleWinner(requestId);\\n  }\\n\\n  /**\\n   * @notice VRF returns a random number\\n   */\\n  function fulfillRandomWords(\\n    uint256 /*requestId*/,\\n    uint256[] calldata randomWords\\n  ) internal override {\\n    uint256 indexOfWinner = randomWords[0] % s_players.length;\\n    address payable recentWinner = s_players[indexOfWinner];\\n    s_recentWinner = recentWinner;\\n    s_players = new address payable[](0);\\n    s_raffleSate = RaffleState.OPEN;\\n    s_lastTimestamp = block.timestamp;\\n    (bool success, ) = s_recentWinner.call{value: address(this).balance}(\\\"\\\");\\n    if (!success) {\\n      revert Raffle__TransferFailed();\\n    }\\n    emit WinnerPicked(recentWinner);\\n  }\\n\\n  function getEntranceFee() public view returns (uint256) {\\n    return i_entranceFee;\\n  }\\n\\n  function getInterval() public view returns (uint256) {\\n    return i_interval;\\n  }\\n\\n  function getPlayer(uint256 index) public view returns (address) {\\n    return s_players[index];\\n  }\\n\\n  function getNumberOfPlayers() public view returns (uint256) {\\n    return s_players.length;\\n  }\\n\\n  function getRecentWinner() public view returns (address) {\\n    return s_recentWinner;\\n  }\\n\\n  function getLastTimestamp() public view returns (uint256) {\\n    return s_lastTimestamp;\\n  }\\n\\n  function getRaffleState() public view returns (RaffleState) {\\n    return s_raffleSate;\\n  }\\n}\\n\",\"keccak256\":\"0xd570a0852d502c9247e554abb45d853c081e80340951f88bf646e5f70af7939a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051611172380380611172833981016040819052610030916101e1565b8433806000816100875760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156100b7576100b781610138565b5050506001600160a01b0381166100e15760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a81b0319166001600160a01b03929092169190911790554260035560a09590955260c09290925260e0526006805463ffffffff90921663ffffffff1990921691909117905550608052610257565b336001600160a01b038216036101905760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161007e565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008060008060008060c087890312156101fa57600080fd5b865160208801519096506001600160a01b038116811461021957600080fd5b809550506040870151935060608701519250608087015163ffffffff8116811461024257600080fd5b8092505060a087015190509295509295509295565b60805160a05160c05160e051610ed461029e60003960006103f001526000610413015260008181610107015261070d01526000818161027a01526109a10152610ed46000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063e55ae4e811610059578063e55ae4e8146102be578063e97dcb62146102de578063f2fde38b146102e6578063fd6673f51461030657600080fd5b80638da5cb5b1461022d5780638ea981171461024b57806391ad27b41461026b5780639eccacf61461029e57600080fd5b80634585e33b116100c65780634585e33b14610198578063473f1ddc146101b85780636e04ff0d146101ea57806379ba50971461021857600080fd5b806309bc33a7146100f8578063115cbaf51461013a5780631fe543e3146101615780633789977014610183575b600080fd5b34801561010457600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561014657600080fd5b50600254600160a01b900460ff166040516101319190610bfe565b34801561016d57600080fd5b5061018161017c366004610c26565b61031b565b005b34801561018f57600080fd5b50600354610127565b3480156101a457600080fd5b506101816101b3366004610ca5565b610370565b3480156101c457600080fd5b506004546001600160a01b03165b6040516001600160a01b039091168152602001610131565b3480156101f657600080fd5b5061020a610205366004610ca5565b610519565b604051610131929190610d5d565b34801561022457600080fd5b5061018161053f565b34801561023957600080fd5b506000546001600160a01b03166101d2565b34801561025757600080fd5b50610181610266366004610d80565b6105e9565b34801561027757600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610127565b3480156102aa57600080fd5b506002546101d2906001600160a01b031681565b3480156102ca57600080fd5b506101d26102d9366004610db0565b6106db565b61018161070b565b3480156102f257600080fd5b50610181610301366004610d80565b6107f8565b34801561031257600080fd5b50600554610127565b6002546001600160a01b031633146103605760025460405163073e64fd60e21b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b61036b83838361080c565b505050565b600061037a610975565b9050806103cf57600554600254479190600160a01b900460ff1660018111156103a5576103a5610be8565b604051632c2193d560e11b8152600481019390935260248301919091526044820152606401610357565b60028054600160a01b60ff60a01b198216179091556040805160c0810182527f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208083019190915260038284015260065463ffffffff1660608301526001608083015282519081019092526000808352926001600160a01b031691639b1c385e919060a0820190610483906109ff565b8152506040518263ffffffff1660e01b81526004016104a29190610dc9565b6020604051808303816000875af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190610e26565b60405190915081907fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b90600090a250505050565b60006060610525610975565b604080516000815260208101909152909590945092505050565b6001546001600160a01b031633146105925760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b6044820152606401610357565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000546001600160a01b0316331480159061060f57506002546001600160a01b03163314155b1561066057336106276000546001600160a01b031690565b60025460405163061db9c160e01b81526001600160a01b0393841660048201529183166024830152919091166044820152606401610357565b6001600160a01b0381166106875760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be69060200160405180910390a150565b6000600582815481106106f0576106f0610e3f565b6000918252602090912001546001600160a01b031692915050565b7f000000000000000000000000000000000000000000000000000000000000000034101561074c5760405163bd4e069560e01b815260040160405180910390fd5b6000600254600160a01b900460ff16600181111561076c5761076c610be8565b1461078a5760405163050955c760e21b815260040160405180910390fd5b6005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319163390811790915560405190917f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d491a2565b610800610a70565b61080981610ac5565b50565b6005546000908383838161082257610822610e3f565b905060200201356108339190610e55565b905060006005828154811061084a5761084a610e3f565b6000918252602082200154600480546001600160a01b0319166001600160a01b039092169182179055915060405190808252806020026020018201604052801561089e578160200160208202803683370190505b5080516108b391600591602090910190610b6e565b506002805460ff60a01b19169055426003556004546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610912576040519150601f19603f3d011682016040523d82523d6000602084013e610917565b606091505b50509050806109395760405163a1d04b3960e01b815260040160405180910390fd5b6040516001600160a01b038316907f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df90600090a2505050505050565b6002546000908190600160a01b900460ff16600181111561099857610998610be8565b600014905060007f0000000000000000000000000000000000000000000000000000000000000000600354426109ce9190610e77565b6005549110915015154715158380156109e45750825b80156109ed5750815b80156109f65750805b94505050505090565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa82604051602401610a3891511515815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292915050565b6000546001600160a01b03163314610ac35760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b6044820152606401610357565b565b336001600160a01b03821603610b1d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610357565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215610bc3579160200282015b82811115610bc357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610b8e565b50610bcf929150610bd3565b5090565b5b80821115610bcf5760008155600101610bd4565b634e487b7160e01b600052602160045260246000fd5b6020810160028310610c2057634e487b7160e01b600052602160045260246000fd5b91905290565b600080600060408486031215610c3b57600080fd5b83359250602084013567ffffffffffffffff80821115610c5a57600080fd5b818601915086601f830112610c6e57600080fd5b813581811115610c7d57600080fd5b8760208260051b8501011115610c9257600080fd5b6020830194508093505050509250925092565b60008060208385031215610cb857600080fd5b823567ffffffffffffffff80821115610cd057600080fd5b818501915085601f830112610ce457600080fd5b813581811115610cf357600080fd5b866020828501011115610d0557600080fd5b60209290920196919550909350505050565b6000815180845260005b81811015610d3d57602081850181015186830182015201610d21565b506000602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201526000610d786040830184610d17565b949350505050565b600060208284031215610d9257600080fd5b81356001600160a01b0381168114610da957600080fd5b9392505050565b600060208284031215610dc257600080fd5b5035919050565b60208152815160208201526020820151604082015261ffff60408301511660608201526000606083015163ffffffff80821660808501528060808601511660a0850152505060a083015160c080840152610d7860e0840182610d17565b600060208284031215610e3857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600082610e7257634e487b7160e01b600052601260045260246000fd5b500690565b81810381811115610e9857634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220469b10b3d6b7deeba6162797b978ccb7122eac1afc6912bfa3eaa0cf9c66827664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063e55ae4e811610059578063e55ae4e8146102be578063e97dcb62146102de578063f2fde38b146102e6578063fd6673f51461030657600080fd5b80638da5cb5b1461022d5780638ea981171461024b57806391ad27b41461026b5780639eccacf61461029e57600080fd5b80634585e33b116100c65780634585e33b14610198578063473f1ddc146101b85780636e04ff0d146101ea57806379ba50971461021857600080fd5b806309bc33a7146100f8578063115cbaf51461013a5780631fe543e3146101615780633789977014610183575b600080fd5b34801561010457600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561014657600080fd5b50600254600160a01b900460ff166040516101319190610bfe565b34801561016d57600080fd5b5061018161017c366004610c26565b61031b565b005b34801561018f57600080fd5b50600354610127565b3480156101a457600080fd5b506101816101b3366004610ca5565b610370565b3480156101c457600080fd5b506004546001600160a01b03165b6040516001600160a01b039091168152602001610131565b3480156101f657600080fd5b5061020a610205366004610ca5565b610519565b604051610131929190610d5d565b34801561022457600080fd5b5061018161053f565b34801561023957600080fd5b506000546001600160a01b03166101d2565b34801561025757600080fd5b50610181610266366004610d80565b6105e9565b34801561027757600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610127565b3480156102aa57600080fd5b506002546101d2906001600160a01b031681565b3480156102ca57600080fd5b506101d26102d9366004610db0565b6106db565b61018161070b565b3480156102f257600080fd5b50610181610301366004610d80565b6107f8565b34801561031257600080fd5b50600554610127565b6002546001600160a01b031633146103605760025460405163073e64fd60e21b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b61036b83838361080c565b505050565b600061037a610975565b9050806103cf57600554600254479190600160a01b900460ff1660018111156103a5576103a5610be8565b604051632c2193d560e11b8152600481019390935260248301919091526044820152606401610357565b60028054600160a01b60ff60a01b198216179091556040805160c0810182527f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208083019190915260038284015260065463ffffffff1660608301526001608083015282519081019092526000808352926001600160a01b031691639b1c385e919060a0820190610483906109ff565b8152506040518263ffffffff1660e01b81526004016104a29190610dc9565b6020604051808303816000875af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190610e26565b60405190915081907fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b90600090a250505050565b60006060610525610975565b604080516000815260208101909152909590945092505050565b6001546001600160a01b031633146105925760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b6044820152606401610357565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000546001600160a01b0316331480159061060f57506002546001600160a01b03163314155b1561066057336106276000546001600160a01b031690565b60025460405163061db9c160e01b81526001600160a01b0393841660048201529183166024830152919091166044820152606401610357565b6001600160a01b0381166106875760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be69060200160405180910390a150565b6000600582815481106106f0576106f0610e3f565b6000918252602090912001546001600160a01b031692915050565b7f000000000000000000000000000000000000000000000000000000000000000034101561074c5760405163bd4e069560e01b815260040160405180910390fd5b6000600254600160a01b900460ff16600181111561076c5761076c610be8565b1461078a5760405163050955c760e21b815260040160405180910390fd5b6005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319163390811790915560405190917f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d491a2565b610800610a70565b61080981610ac5565b50565b6005546000908383838161082257610822610e3f565b905060200201356108339190610e55565b905060006005828154811061084a5761084a610e3f565b6000918252602082200154600480546001600160a01b0319166001600160a01b039092169182179055915060405190808252806020026020018201604052801561089e578160200160208202803683370190505b5080516108b391600591602090910190610b6e565b506002805460ff60a01b19169055426003556004546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610912576040519150601f19603f3d011682016040523d82523d6000602084013e610917565b606091505b50509050806109395760405163a1d04b3960e01b815260040160405180910390fd5b6040516001600160a01b038316907f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df90600090a2505050505050565b6002546000908190600160a01b900460ff16600181111561099857610998610be8565b600014905060007f0000000000000000000000000000000000000000000000000000000000000000600354426109ce9190610e77565b6005549110915015154715158380156109e45750825b80156109ed5750815b80156109f65750805b94505050505090565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa82604051602401610a3891511515815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292915050565b6000546001600160a01b03163314610ac35760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b6044820152606401610357565b565b336001600160a01b03821603610b1d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610357565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215610bc3579160200282015b82811115610bc357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610b8e565b50610bcf929150610bd3565b5090565b5b80821115610bcf5760008155600101610bd4565b634e487b7160e01b600052602160045260246000fd5b6020810160028310610c2057634e487b7160e01b600052602160045260246000fd5b91905290565b600080600060408486031215610c3b57600080fd5b83359250602084013567ffffffffffffffff80821115610c5a57600080fd5b818601915086601f830112610c6e57600080fd5b813581811115610c7d57600080fd5b8760208260051b8501011115610c9257600080fd5b6020830194508093505050509250925092565b60008060208385031215610cb857600080fd5b823567ffffffffffffffff80821115610cd057600080fd5b818501915085601f830112610ce457600080fd5b813581811115610cf357600080fd5b866020828501011115610d0557600080fd5b60209290920196919550909350505050565b6000815180845260005b81811015610d3d57602081850181015186830182015201610d21565b506000602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201526000610d786040830184610d17565b949350505050565b600060208284031215610d9257600080fd5b81356001600160a01b0381168114610da957600080fd5b9392505050565b600060208284031215610dc257600080fd5b5035919050565b60208152815160208201526020820151604082015261ffff60408301511660608201526000606083015163ffffffff80821660808501528060808601511660a0850152505060a083015160c080840152610d7860e0840182610d17565b600060208284031215610e3857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600082610e7257634e487b7160e01b600052601260045260246000fd5b500690565b81810381811115610e9857634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220469b10b3d6b7deeba6162797b978ccb7122eac1afc6912bfa3eaa0cf9c66827664736f6c63430008130033",
  "devdoc": {
    "author": "jipingl",
    "details": "chainlink VRF version is v2.5chainlink automation version is v2.1",
    "kind": "dev",
    "methods": {},
    "title": "A truly decentralized Raffle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "checkUpkeep(bytes)": {
        "notice": "Automation will call this method to check if performUpkeep is executed"
      },
      "enter()": {
        "notice": "Users participate in the raffle through this function"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "performUpkeep(bytes)": {
        "notice": "Automation calls this method to trigger the selection of winners"
      },
      "setCoordinator(address)": {
        "notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "notice": "The raffle logic of this contract is as follows:1. Users join the raffle and pay a fee.2. After a certain time interval, chainlink automation will automatically trigger the logic of selecting the final winner.3. The final winner is calculated from the random number of chainlink VRF",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 97,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 99,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2400,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_vrfCoordinator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVRFCoordinatorV2Plus)2549"
      },
      {
        "astId": 3555,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleSate",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)3552"
      },
      {
        "astId": 3557,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3559,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3562,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 3572,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_callbackGasLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_contract(IVRFCoordinatorV2Plus)2549": {
        "encoding": "inplace",
        "label": "contract IVRFCoordinatorV2Plus",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleState)3552": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}